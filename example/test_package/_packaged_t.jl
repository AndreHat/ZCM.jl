# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

begin
# @assert (endswith(string(current_module()), "test_package")) "Only import this file through its module"
@assert (endswith(string(@__MODULE__), "test_package")) "Only import this file through its module"


import ZCM


export packaged_t
mutable struct  packaged_t <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************

    packaged                      ::Bool
    a                             ::ZCM.AbstractZcmType # test_package.packaged2_t


    function packaged_t()

        self = new()

        # **********************
        # Members
        # **********************

        self.packaged = false
        self.a = __basemodule.test_package.packaged2_t()

        return self
    end

end

const __test_package_packaged_t_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{packaged_t}, parents::Array{String})
    if __test_package_packaged_t_hash[] != 0; return __test_package_packaged_t_hash[]; end
    if "test_package_packaged_t" in parents; return 0; end
    newparents::Array{String} = [parents[:]; "test_package_packaged_t"::String];
    hash::UInt64 = 0x26471757e1db6303 + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule.test_package.packaged2_t, newparents))
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __test_package_packaged_t_hash[] = reinterpret(Int64, hash)
    return __test_package_packaged_t_hash[]
end

function ZCM.getHash(::Type{packaged_t})
    return ZCM._get_hash_recursive(packaged_t, Array{String,1}())
end

function ZCM._encode_one(msg::packaged_t, buf)
    write(buf, msg.packaged)
    @assert isa(msg.a, __basemodule.test_package.packaged2_t) "Msg of type `test_package.packaged_t` requires field `a` to be of type `test_package.packaged2_t`"
    ZCM._encode_one(msg.a,buf)
end

function ZCM.encode(msg::packaged_t)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(packaged_t)))
    ZCM._encode_one(msg, buf)
    return ZCM._takebuf_array(buf);
end

function ZCM._decode_one(::Type{packaged_t}, buf)
    msg = packaged_t();
    msg.packaged = reinterpret(Bool, read(buf, 1))[1]
    msg.a = ZCM._decode_one(__basemodule.test_package.packaged2_t,buf)
    return msg
end

function ZCM.decode(::Type{packaged_t}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(packaged_t)
        throw("Decode error")
    end
    return ZCM._decode_one(packaged_t, buf)
end

end # `begin` block
