# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

# This file intended to be imported by user
# after setting up their LOAD_PATH,
# but you must import the type directly into the user's module:
#     pushfirst!(LOAD_PATH, "path/to/dir/containing/this/file")
#     import _unpackaged_t : unpackaged_t
module _unpackaged_t
__basemodule = parentmodule(_unpackaged_t)
__basemodule == _unpackaged_t && (__basemodule = Main)

import ZCM

function __init__()
end

export unpackaged_t
mutable struct unpackaged_t <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************

    x                             ::Int64


    function unpackaged_t()

        self = new()

        # **********************
        # Members
        # **********************

        self.x = 0

        return self
    end

end

const __unpackaged_t_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{unpackaged_t}, parents::Array{String})
    if __unpackaged_t_hash[] != 0; return __unpackaged_t_hash[]; end
    if "unpackaged_t" in parents; return 0; end
    hash::UInt64 = 0xc6ee746a491f75db
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __unpackaged_t_hash[] = reinterpret(Int64, hash)
    return __unpackaged_t_hash[]
end

function ZCM.getHash(::Type{unpackaged_t})
    return ZCM._get_hash_recursive(unpackaged_t, Array{String,1}())
end

function ZCM._encode_one(msg::unpackaged_t, buf)
    write(buf, hton(msg.x))
end

function ZCM.encode(msg::unpackaged_t)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(unpackaged_t)))
    ZCM._encode_one(msg, buf)
    return ZCM._takebuf_array(buf);
end

function ZCM._decode_one(::Type{unpackaged_t}, buf)
    msg = unpackaged_t();
    msg.x = ntoh(reinterpret(Int64, read(buf, 8))[1])
    return msg
end

function ZCM.decode(::Type{unpackaged_t}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(unpackaged_t)
        throw("Decode error")
    end
    return ZCM._decode_one(unpackaged_t, buf)
end

end # `module _unpackaged_t` block
