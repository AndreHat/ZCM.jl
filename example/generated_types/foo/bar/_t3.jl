# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

begin
@assert (endswith(string(@__MODULE__), "foo.bar")) "Only import this file through its module"

import ZCM


export t3
mutable struct t3 <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************

    x                             ::ZCM.AbstractZcmType # unpackaged_t


    function t3()

        self = new()

        # **********************
        # Members
        # **********************

        self.x = __basemodule._unpackaged_t.unpackaged_t()

        return self
    end

end

const __foo_bar_t3_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{t3}, parents::Array{String})
    if __foo_bar_t3_hash[] != 0; return __foo_bar_t3_hash[]; end
    if "foo_bar_t3" in parents; return 0; end
    newparents::Array{String} = [parents[:]; "foo_bar_t3"::String];
    hash::UInt64 = 0x1234567802743300 + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule._unpackaged_t.unpackaged_t, newparents))
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __foo_bar_t3_hash[] = reinterpret(Int64, hash)
    return __foo_bar_t3_hash[]
end

function ZCM.getHash(::Type{t3})
    return ZCM._get_hash_recursive(t3, Array{String,1}())
end

function ZCM._encode_one(msg::t3, buf)
    @assert isa(msg.x, __basemodule._unpackaged_t.unpackaged_t) "Msg of type `foo.bar.t3` requires field `x` to be of type `unpackaged_t`"
    ZCM._encode_one(msg.x,buf)
end

function ZCM.encode(msg::t3)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(t3)))
    ZCM._encode_one(msg, buf)
    return ZCM._takebuf_array(buf);
end

function ZCM._decode_one(::Type{t3}, buf)
    msg = t3();
    msg.x = ZCM._decode_one(__basemodule._unpackaged_t.unpackaged_t,buf)
    return msg
end

function ZCM.decode(::Type{t3}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(t3)
        throw("Decode error")
    end
    return ZCM._decode_one(t3, buf)
end

end # `begin` block
