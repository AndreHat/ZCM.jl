# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

begin
@assert (endswith(string(@__MODULE__), "foo")) "Only import this file through its module"

import ZCM


export t2
mutable struct t2 <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************

    x                             ::Int64
    y                             ::ZCM.AbstractZcmType # foo.bar.t3


    function t2()

        self = new()

        # **********************
        # Members
        # **********************

        self.x = 0
        self.y = __basemodule.foo.bar.t3()

        return self
    end

end

const __foo_t2_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{t2}, parents::Array{String})
    if __foo_t2_hash[] != 0; return __foo_t2_hash[]; end
    if "foo_t2" in parents; return 0; end
    newparents::Array{String} = [parents[:]; "foo_t2"::String];
    hash::UInt64 = 0x28ded9c6b827f01b + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule.foo.bar.t3, newparents))
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __foo_t2_hash[] = reinterpret(Int64, hash)
    return __foo_t2_hash[]
end

function ZCM.getHash(::Type{t2})
    return ZCM._get_hash_recursive(t2, Array{String,1}())
end

function ZCM._encode_one(msg::t2, buf)
    write(buf, hton(msg.x))
    @assert isa(msg.y, __basemodule.foo.bar.t3) "Msg of type `foo.t2` requires field `y` to be of type `foo.bar.t3`"
    ZCM._encode_one(msg.y,buf)
end

function ZCM.encode(msg::t2)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(t2)))
    ZCM._encode_one(msg, buf)
    return ZCM._takebuf_array(buf);
end

function ZCM._decode_one(::Type{t2}, buf)
    msg = t2();
    msg.x = ntoh(reinterpret(Int64, read(buf, 8))[1])
    msg.y = ZCM._decode_one(__basemodule.foo.bar.t3,buf)
    return msg
end

function ZCM.decode(::Type{t2}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(t2)
        throw("Decode error")
    end
    return ZCM._decode_one(t2, buf)
end

end # `begin` block
