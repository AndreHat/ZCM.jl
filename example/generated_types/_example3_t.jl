# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

# This file intended to be imported by user
# after setting up their LOAD_PATH,
# but you must import the type directly into the user's module:
#     pushfirst!(LOAD_PATH, "path/to/dir/containing/this/file")
#     import _example3_t : example3_t
module _example3_t
__basemodule = parentmodule(_example3_t)
__basemodule == _example3_t && (__basemodule = Main)

import ZCM

function __init__()
end

export example3_t
mutable struct example3_t <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************

    arr                           ::Array{Int32,1}


    # **********************
    # Constants
    # **********************

    arrsize                       ::Int32


    function example3_t()

        self = new()

        # **********************
        # Members
        # **********************

        self.arr = [ 0 for dim0=1:10 ]

        # **********************
        # Constants
        # **********************

        self.arrsize::Int32 = 10

        return self
    end

end

const __example3_t_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{example3_t}, parents::Array{String})
    if __example3_t_hash[] != 0; return __example3_t_hash[]; end
    if "example3_t" in parents; return 0; end
    hash::UInt64 = 0x3d4bc295e6734beb
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __example3_t_hash[] = reinterpret(Int64, hash)
    return __example3_t_hash[]
end

function ZCM.getHash(::Type{example3_t})
    return ZCM._get_hash_recursive(example3_t, Array{String,1}())
end

function ZCM._encode_one(msg::example3_t, buf)
    @assert size(msg.arr,1)==10 "Msg of type `example3_t` requires field `arr` dimension `1` to be size `10`"
    for i0=1:10
        write(buf, hton(msg.arr[i0]))
    end
end

function ZCM.encode(msg::example3_t)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(example3_t)))
    ZCM._encode_one(msg, buf)
    return ZCM._takebuf_array(buf);
end

function ZCM._decode_one(::Type{example3_t}, buf)
    msg = example3_t();
    msg.arr = Array{Int32, 1}(undef,10)
    for i0=1:10
        msg.arr[i0] = ntoh(reinterpret(Int32, read(buf, 4))[1])
    end
    return msg
end

function ZCM.decode(::Type{example3_t}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(example3_t)
        throw("Decode error")
    end
    return ZCM._decode_one(example3_t, buf)
end

end # `module _example3_t` block
