# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

# This file intended to be imported by user
# after setting up their LOAD_PATH,
# but you must import the type directly into the user's module:
#     unshift!(LOAD_PATH, "path/to/dir/containing/this/file")
#     import _arrays_t : arrays_t
module _arrays_t
__basemodule = parentmodule(_arrays_t)

import ZCM
# include("../example/_example_t.jl")
# using Main._example_t
function __init__()
    # Core.eval(__basemodule, Meta.parse("import Main._example_t: example_t"))
    Core.eval(Main, Meta.parse("import Main._example_t: example_t"))
end


export arrays_t
@show "0"
mutable struct arrays_t <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************
    @show "1"
    m                             ::Int8
    n                             ::Int8
    prim_onedim_static            ::Array{Bool,1}
    prim_onedim_dynamic           ::Array{Int16,1}
    prim_twodim_static_static     ::Array{Int32,2}
    prim_twodim_static_dynamic    ::Array{Int64,2}
    prim_twodim_dynamic_static    ::Array{Float32,2}
    prim_twodim_dynamic_dynamic   ::Array{Float64,2}
    nonprim_onedim_static         ::Array{ZCM.AbstractZcmType,1} # example_t
    nonprim_onedim_dynamic        ::Array{ZCM.AbstractZcmType,1} # example_t
    nonprim_twodim_static_static  ::Array{ZCM.AbstractZcmType,2} # example_t
    nonprim_twodim_static_dynamic ::Array{ZCM.AbstractZcmType,2} # example_t
    nonprim_twodim_dynamic_static ::Array{ZCM.AbstractZcmType,2} # example_t
    nonprim_twodim_dynamic_dynamic::Array{ZCM.AbstractZcmType,2} # example_t

    @show "2"
    function arrays_t()

        self = new()

        # **********************
        # Members
        # **********************
        @show "3"
        self.m = 0
        self.n = 0
        self.prim_onedim_static = [ false for dim0=1:3 ]
        self.prim_onedim_dynamic = [ 0 for dim0=1:self.n ]
        self.prim_twodim_static_static = [ 0 for dim0=1:3, dim1=1:3 ]
        self.prim_twodim_static_dynamic = [ 0 for dim0=1:3, dim1=1:self.n ]
        self.prim_twodim_dynamic_static = [ 0.0 for dim0=1:self.n, dim1=1:3 ]
        self.prim_twodim_dynamic_dynamic = [ 0.0 for dim0=1:self.m, dim1=1:self.n ]
        @show "4"
        self.nonprim_onedim_static = [ __basemodule._example_t.example_t() for dim0=1:3 ]
        @show "5"
        self.nonprim_onedim_dynamic = [ __basemodule._example_t.example_t() for dim0=1:self.n ]
        self.nonprim_twodim_static_static = [ __basemodule._example_t.example_t() for dim0=1:3, dim1=1:3 ]
        self.nonprim_twodim_static_dynamic = [ __basemodule._example_t.example_t() for dim0=1:3, dim1=1:self.n ]
        self.nonprim_twodim_dynamic_static = [ __basemodule._example_t.example_t() for dim0=1:self.n, dim1=1:3 ]
        self.nonprim_twodim_dynamic_dynamic = [ __basemodule._example_t.example_t() for dim0=1:self.m, dim1=1:self.n ]
        @show "6"
        return self
    end

end

const __arrays_t_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{arrays_t}, parents::Array{String})
    if __arrays_t_hash[] != 0; return __arrays_t_hash[]; end
    if "arrays_t" in parents; return 0; end
    newparents::Array{String} = [parents[:]; "arrays_t"::String];
    hash::UInt64 = 0x6ebeacdee9743f6b + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule._example_t.example_t, newparents)) + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule._example_t.example_t, newparents)) + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule._example_t.example_t, newparents)) + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule._example_t.example_t, newparents)) + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule._example_t.example_t, newparents)) + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule._example_t.example_t, newparents))
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __arrays_t_hash[] = reinterpret(Int64, hash)
    return __arrays_t_hash[]
end

function ZCM.getHash(::Type{arrays_t})
    return ZCM._get_hash_recursive(arrays_t, Array{String,1}())
end

function ZCM._encode_one(msg::arrays_t, buf)
    write(buf, hton(msg.m))
    write(buf, hton(msg.n))
    @assert size(msg.prim_onedim_static,1)==3 "Msg of type `arrays_t` requires field `prim_onedim_static` dimension `1` to be size `3`"
    for i0=1:3
        write(buf, msg.prim_onedim_static[i0])
    end
    @assert size(msg.prim_onedim_dynamic,1)==msg.n "Msg of type `arrays_t` requires field `prim_onedim_dynamic` dimension `1` to be size `msg.n`"
    for i0=1:msg.n
        write(buf, hton(msg.prim_onedim_dynamic[i0]))
    end
    @assert size(msg.prim_twodim_static_static,1)==3 "Msg of type `arrays_t` requires field `prim_twodim_static_static` dimension `1` to be size `3`"
    @assert size(msg.prim_twodim_static_static,2)==3 "Msg of type `arrays_t` requires field `prim_twodim_static_static` dimension `2` to be size `3`"
    for i0=1:3
        for i1=1:3
            write(buf, hton(msg.prim_twodim_static_static[i0,i1]))
        end
    end
    @assert size(msg.prim_twodim_static_dynamic,1)==3 "Msg of type `arrays_t` requires field `prim_twodim_static_dynamic` dimension `1` to be size `3`"
    @assert size(msg.prim_twodim_static_dynamic,2)==msg.n "Msg of type `arrays_t` requires field `prim_twodim_static_dynamic` dimension `2` to be size `msg.n`"
    for i0=1:3
        for i1=1:msg.n
            write(buf, hton(msg.prim_twodim_static_dynamic[i0,i1]))
        end
    end
    @assert size(msg.prim_twodim_dynamic_static,1)==msg.n "Msg of type `arrays_t` requires field `prim_twodim_dynamic_static` dimension `1` to be size `msg.n`"
    @assert size(msg.prim_twodim_dynamic_static,2)==3 "Msg of type `arrays_t` requires field `prim_twodim_dynamic_static` dimension `2` to be size `3`"
    for i0=1:msg.n
        for i1=1:3
            write(buf, hton(msg.prim_twodim_dynamic_static[i0,i1]))
        end
    end
    @assert size(msg.prim_twodim_dynamic_dynamic,1)==msg.m "Msg of type `arrays_t` requires field `prim_twodim_dynamic_dynamic` dimension `1` to be size `msg.m`"
    @assert size(msg.prim_twodim_dynamic_dynamic,2)==msg.n "Msg of type `arrays_t` requires field `prim_twodim_dynamic_dynamic` dimension `2` to be size `msg.n`"
    for i0=1:msg.m
        for i1=1:msg.n
            write(buf, hton(msg.prim_twodim_dynamic_dynamic[i0,i1]))
        end
    end
    @assert size(msg.nonprim_onedim_static,1)==3 "Msg of type `arrays_t` requires field `nonprim_onedim_static` dimension `1` to be size `3`"
    for i0=1:3
        @assert isa(msg.nonprim_onedim_static[i0], __basemodule._example_t.example_t) "Msg of type `arrays_t` requires field `msg.nonprim_onedim_static[i0]` to be of type `example_t`"
        ZCM._encode_one(msg.nonprim_onedim_static[i0],buf)
    end
    @assert size(msg.nonprim_onedim_dynamic,1)==msg.n "Msg of type `arrays_t` requires field `nonprim_onedim_dynamic` dimension `1` to be size `msg.n`"
    for i0=1:msg.n
        @assert isa(msg.nonprim_onedim_dynamic[i0], __basemodule._example_t.example_t) "Msg of type `arrays_t` requires field `msg.nonprim_onedim_dynamic[i0]` to be of type `example_t`"
        ZCM._encode_one(msg.nonprim_onedim_dynamic[i0],buf)
    end
    @assert size(msg.nonprim_twodim_static_static,1)==3 "Msg of type `arrays_t` requires field `nonprim_twodim_static_static` dimension `1` to be size `3`"
    @assert size(msg.nonprim_twodim_static_static,2)==3 "Msg of type `arrays_t` requires field `nonprim_twodim_static_static` dimension `2` to be size `3`"
    for i0=1:3
        for i1=1:3
            @assert isa(msg.nonprim_twodim_static_static[i0,i1], __basemodule._example_t.example_t) "Msg of type `arrays_t` requires field `msg.nonprim_twodim_static_static[i0,i1]` to be of type `example_t`"
            ZCM._encode_one(msg.nonprim_twodim_static_static[i0,i1],buf)
        end
    end
    @assert size(msg.nonprim_twodim_static_dynamic,1)==3 "Msg of type `arrays_t` requires field `nonprim_twodim_static_dynamic` dimension `1` to be size `3`"
    @assert size(msg.nonprim_twodim_static_dynamic,2)==msg.n "Msg of type `arrays_t` requires field `nonprim_twodim_static_dynamic` dimension `2` to be size `msg.n`"
    for i0=1:3
        for i1=1:msg.n
            @assert isa(msg.nonprim_twodim_static_dynamic[i0,i1], __basemodule._example_t.example_t) "Msg of type `arrays_t` requires field `msg.nonprim_twodim_static_dynamic[i0,i1]` to be of type `example_t`"
            ZCM._encode_one(msg.nonprim_twodim_static_dynamic[i0,i1],buf)
        end
    end
    @assert size(msg.nonprim_twodim_dynamic_static,1)==msg.n "Msg of type `arrays_t` requires field `nonprim_twodim_dynamic_static` dimension `1` to be size `msg.n`"
    @assert size(msg.nonprim_twodim_dynamic_static,2)==3 "Msg of type `arrays_t` requires field `nonprim_twodim_dynamic_static` dimension `2` to be size `3`"
    for i0=1:msg.n
        for i1=1:3
            @assert isa(msg.nonprim_twodim_dynamic_static[i0,i1], __basemodule._example_t.example_t) "Msg of type `arrays_t` requires field `msg.nonprim_twodim_dynamic_static[i0,i1]` to be of type `example_t`"
            ZCM._encode_one(msg.nonprim_twodim_dynamic_static[i0,i1],buf)
        end
    end
    @assert size(msg.nonprim_twodim_dynamic_dynamic,1)==msg.m "Msg of type `arrays_t` requires field `nonprim_twodim_dynamic_dynamic` dimension `1` to be size `msg.m`"
    @assert size(msg.nonprim_twodim_dynamic_dynamic,2)==msg.n "Msg of type `arrays_t` requires field `nonprim_twodim_dynamic_dynamic` dimension `2` to be size `msg.n`"
    for i0=1:msg.m
        for i1=1:msg.n
            @assert isa(msg.nonprim_twodim_dynamic_dynamic[i0,i1], __basemodule._example_t.example_t) "Msg of type `arrays_t` requires field `msg.nonprim_twodim_dynamic_dynamic[i0,i1]` to be of type `example_t`"
            ZCM._encode_one(msg.nonprim_twodim_dynamic_dynamic[i0,i1],buf)
        end
    end
end

function ZCM.encode(msg::arrays_t)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(arrays_t)))
    ZCM._encode_one(msg, buf)
    return ZCM._takebuf_array(buf);
end

function ZCM._decode_one(::Type{arrays_t}, buf)
    msg = arrays_t();
    msg.m = reinterpret(Int8, read(buf, 1))[1]
    msg.n = reinterpret(Int8, read(buf, 1))[1]
    msg.prim_onedim_static = Array{Bool, 1}(undef,3)
    for i0=1:3
        msg.prim_onedim_static[i0] = reinterpret(Bool, read(buf, 1))[1]
    end
    msg.prim_onedim_dynamic = Array{Int16, 1}(undef,msg.n)
    for i0=1:msg.n
        msg.prim_onedim_dynamic[i0] = ntoh(reinterpret(Int16, read(buf, 2))[1])
    end
    msg.prim_twodim_static_static = Array{Int32, 2}(undef,3,3)
    for i0=1:3
        for i1=1:3
            msg.prim_twodim_static_static[i0,i1] = ntoh(reinterpret(Int32, read(buf, 4))[1])
        end
    end
    msg.prim_twodim_static_dynamic = Array{Int64, 2}(undef,3,msg.n)
    for i0=1:3
        for i1=1:msg.n
            msg.prim_twodim_static_dynamic[i0,i1] = ntoh(reinterpret(Int64, read(buf, 8))[1])
        end
    end
    msg.prim_twodim_dynamic_static = Array{Float32, 2}(undef,msg.n,3)
    for i0=1:msg.n
        for i1=1:3
            msg.prim_twodim_dynamic_static[i0,i1] = ntoh(reinterpret(Float32, read(buf, 4))[1])
        end
    end
    msg.prim_twodim_dynamic_dynamic = Array{Float64, 2}(undef,msg.m,msg.n)
    for i0=1:msg.m
        for i1=1:msg.n
            msg.prim_twodim_dynamic_dynamic[i0,i1] = ntoh(reinterpret(Float64, read(buf, 8))[1])
        end
    end
    msg.nonprim_onedim_static = Array{ZCM.AbstractZcmType, 1}(undef,3)
    for i0=1:3
        msg.nonprim_onedim_static[i0] = ZCM._decode_one(__basemodule._example_t.example_t,buf)
    end
    msg.nonprim_onedim_dynamic = Array{ZCM.AbstractZcmType, 1}(undef,msg.n)
    for i0=1:msg.n
        msg.nonprim_onedim_dynamic[i0] = ZCM._decode_one(__basemodule._example_t.example_t,buf)
    end
    msg.nonprim_twodim_static_static = Array{ZCM.AbstractZcmType, 2}(undef,3,3)
    for i0=1:3
        for i1=1:3
            msg.nonprim_twodim_static_static[i0,i1] = ZCM._decode_one(__basemodule._example_t.example_t,buf)
        end
    end
    msg.nonprim_twodim_static_dynamic = Array{ZCM.AbstractZcmType, 2}(undef,3,msg.n)
    for i0=1:3
        for i1=1:msg.n
            msg.nonprim_twodim_static_dynamic[i0,i1] = ZCM._decode_one(__basemodule._example_t.example_t,buf)
        end
    end
    msg.nonprim_twodim_dynamic_static = Array{ZCM.AbstractZcmType, 2}(undef,msg.n,3)
    for i0=1:msg.n
        for i1=1:3
            msg.nonprim_twodim_dynamic_static[i0,i1] = ZCM._decode_one(__basemodule._example_t.example_t,buf)
        end
    end
    msg.nonprim_twodim_dynamic_dynamic = Array{ZCM.AbstractZcmType, 2}(undef,msg.m,msg.n)
    for i0=1:msg.m
        for i1=1:msg.n
            msg.nonprim_twodim_dynamic_dynamic[i0,i1] = ZCM._decode_one(__basemodule._example_t.example_t,buf)
        end
    end
    return msg
end

function ZCM.decode(::Type{arrays_t}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(arrays_t)
        throw("Decode error")
    end
    return ZCM._decode_one(arrays_t, buf)
end

end # `module _arrays_t` block
